{"version":3,"sources":["angular-point-lookup-cache.ts","index.ts"],"names":["ap","ap.lookupCache","ap.lookupCache.LookupCacheService","ap.lookupCache.LookupCacheService.constructor","ap.lookupCache.LookupCacheService.cacheEntityByLookupId","ap.lookupCache.LookupCacheService.getPropertyCache","ap.lookupCache.LookupCacheService.removeEntityFromLookupCaches","ap.lookupCache.LookupCacheService.retrieveLookupCacheById","ap.lookupCache.LookupCacheService.backupLookupValue","ap.lookupCache.LookupCacheService.cacheSingleLookup","ap.lookupCache.LookupCacheService.removeEntityFromSingleLookupCache"],"mappings":"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","file":"angular-point-lookup-cache.js","sourcesContent":["/// <reference path=\"../typings/tsd.d.ts\" />\n\nmodule ap.lookupCache {\n    'use strict';\n\n    var service: LookupCacheService, apIndexedCacheFactory;\n\n    interface ILookupCacheService {\n        cacheEntityByLookupId(listItem: ap.ListItem<any>, propertyArray: string[]): void;\n        getPropertyCache<T>(propertyName: string, listId: string): { [key: number]: ap.IndexedCache<T> };\n        removeEntityFromLookupCaches(listItem: ap.ListItem<any>, propertyArray: string[]): void;\n        retrieveLookupCacheById<T>(propertyName: string, listId: string, cacheId: number): ap.IndexedCache<T>;\n        retrieveLookupCacheById<T>(propertyName: string, listId: string, cacheId: number, asObject?: boolean): T[];\n    }\n\n\n    /**\n     * @ngdoc service\n     * @name apLookupCacheService\n     * @description\n     * Service to create a reverse lookup cache that stores a list item in key/val map based on lookup id so the remote \n     * moddle can call service to find all related list items already stored in the cache.  Only need to process on list\n     * item instantiation and then prune references when a list item is saved/deleted.\n     * \n     * \n     * @example\n     * <pre>\n     * //Register On Model\n     * var lookupFieldsToCache = ['project'];\n     *\n     * function ProjectTask(obj) {\n     *     var self = this;\n     *     _.extend(self, obj);\n     *\n     *     if (self.id) {\n     *         // Store in cached object so we can reference from lookup reference\n     *         lookupCacheService.cacheEntityByLookupId(self, lookupFieldsToCache);\n     *     }\n     * }\n     *\n     * //Monkey Patch save and delete to allow us to cleanup cache\n     * ProjectTask.prototype._deleteItem = SpecificationRequirement.prototype.deleteItem;\n     * ProjectTask.prototype.deleteItem = function () {\n     *     if (this.id) {\n     *         apLookupCacheService.removeEntityFromLookupCaches(this, lookupFieldsToCache);\n     *     }\n     *     return this._deleteItem(arguments);\n     * }\n     * ProjectTask.prototype._saveChanges = SpecificationRequirement.prototype.saveChanges;\n     * ProjectTask.prototype.saveChanges = function () {\n     *     if (this.id) {\n     *         apLookupCacheService.removeEntityFromLookupCaches(this, lookupFieldsToCache);\n     *     }\n     *     return this._saveChanges(arguments);\n     * }\n     *\n     * var model = apModelFactory.create({\n     *     factory: ProjectTask,\n     *     getChildren: getChildren,\n     *     list: {\n     *         // Maps to the offline XML file in dev folder (no spaces)\n     *         title: 'ProjectTask',\n     *         /// List GUID can be found in list properties in SharePoint designer\n     *         environments: {\n     *             production: '{C72C44A2-DC40-4308-BEFF-3FF418D14022}',\n     *             test: '{DAD8689C-8B9E-4088-BEC5-9F273CAAE104}'\n     *         },\n     *         customFields: [\n     *             // Array of objects mapping each SharePoint field to a property on a list item object\n     *             {staticName: 'Title', objectType: 'Text', mappedName: 'title', cols: 3, readOnly: false},\n     *             {staticName: 'Project', objectType: 'Lookup', mappedName: 'project', readOnly: false}\n     *             ...\n     *         ]\n     *     }\n     * });\n     *\n     * @ngdoc function\n     * @name ProjectTask:getProjectTasks\n     * @methodOf ProjectTask\n     * @param {number} projectId ID of project to use as key for task lookups.\n     * @param {boolean} [asObject=false]  Optionally prevent conversion to an array.\n     * @description\n     * Find all project tasks that reference a given project.\n     * @returns {object} Keys of spec id's and value of the spec objects if \"asObject=true\" otherwise ProjectTask[]\n     * function getProjectTasks(projectId, asObject) {\n     *     return lookupCacheService.retrieveLookupCacheById('project', model.list.getListId(), projectId, asObject);\n     * }\n     * </pre>\n     *\n     *\n     * Using Cached Value From Project Object\n     * <pre>\n     * // On the project model\n     * function Project(obj) {\n     *     var self = this;\n     *     _.assign(self, obj);\n     * }\n     *\n     * Project.prototype.getProjectTasks = function() {\n     *     return projectTasksModel.getProjectTasks(this.id);\n     * }\n     *\n     * // Project tasks are now directly available from a given project\n     *\n     * //Returns an array containing all project tasks\n     * var projectTasks = myProject.getProjectTasks();\n     *\n     * //Returns an indexed cache object that hasn't been converted into an array, keys=id and val=list item\n     * var projectTasks = myProject.getProjectTasks(true);\n     * </pre>\n     */\n    export class LookupCacheService implements ILookupCacheService {\n        backup: { [key: string]: { [key: number]: {} } } = {};\n        lookupCache = {};\n        static $inject = ['apIndexedCacheFactory'];\n\n        constructor(_apIndexedCacheFactory_) {\n            apIndexedCacheFactory = _apIndexedCacheFactory_;\n            service = this;\n        }\n\n        /**\n         * @ngdoc function\n         * @name apLookupCacheService:cacheEntityByLookupId\n         * @methodOf apLookupCacheService\n         * @param {ListItem} listItem List item to index.\n         * @param {string[]} propertyArray Array of the lookup properties to index by lookupId.\n         */\n        cacheEntityByLookupId(listItem: ap.ListItem<any>, propertyArray: string[]): void {\n            if (listItem.id) {\n                /** GUID of the list definition on the model */\n                var listId = listItem.getListId();\n                /** Only cache entities saved to server */\n                _.each(propertyArray, (propertyName) => {\n                    service.cacheSingleLookup(listItem, propertyName, listId);\n                    service.backupLookupValue(listItem, propertyName, listId);\n                });\n            }\n        }\n\n        getPropertyCache<T>(propertyName: string, listId: string): { [key: number]: ap.IndexedCache<T> } {\n            this.lookupCache[listId] = this.lookupCache[listId] || {};\n            this.lookupCache[listId][propertyName] = this.lookupCache[listId][propertyName] || {};\n            return this.lookupCache[listId][propertyName];\n        }\n\n        removeEntityFromLookupCaches(listItem: ap.ListItem<any>, propertyArray: string[]): void {\n            if (listItem.id) {\n                var listId = listItem.getListId();\n                /** Only cache entities saved to server */\n                _.each(propertyArray, function(propertyName) {\n                    service.removeEntityFromSingleLookupCache(listItem, propertyName, listId);\n                });\n            }\n        }\n\n        /**\n         * @ngdoc function\n         * @name apLookupCacheService:retrieveLookupCacheById\n         * @methodOf apLookupCacheService\n         * @param {string} propertyName Cache name - name of property on cached entity.\n         * @param {number} cacheId ID of the cache.  The entity.property.lookupId.\n         * @param {string} listId GUID of the list definition on the model.\n         * @param {boolean} [asObject=false] Defaults to return as an array but if set to false returns the cache object\n         * instead.\n         * @returns {object} Keys of entity id and value of entity.\n         */\n        retrieveLookupCacheById<T>(propertyName: string, listId: string, cacheId: number, asObject?: boolean) {\n            var cache = service.getPropertyCache(propertyName, listId);\n            if (asObject) {\n                cache[cacheId] = cache[cacheId] || apIndexedCacheFactory.create();\n                return cache[cacheId];\n            } else {\n                return cache[cacheId] ? _.toArray(cache[cacheId]) : [];\n            }\n        }\n\n        /**\n         * @ngdoc function\n         * @name apLookupCacheService:backupLookupValue\n         * @methodOf apLookupCacheService\n         * @param {ListItem} listItem List item to index.\n         * @param {string} propertyName Cache name - name of property on cached entity.\n         * @param {string} listId GUID of the list definition on the model.\n         * @description Stores a copy of the initial lookup value so in the event that the lookup value is changed we can\n         * remove cached references prior to saving.\n         */\n        private backupLookupValue(listItem: ap.ListItem<any>, propertyName: string, listId: string): void {\n            this.backup[listId] = this.backup[listId] || {};\n            this.backup[listId][listItem.id] = this.backup[listId][listItem.id] || {};\n            this.backup[listId][listItem.id][propertyName] = _.clone(listItem[propertyName]);\n        }\n\n\n        private cacheSingleLookup(listItem: ap.ListItem<any>, propertyName: string, listId: string): void {\n            if (listItem[propertyName]) {\n                /** Handle single and multiple lookups by only dealing with an Lookup[] */\n                var lookups = _.isArray(listItem[propertyName]) ? listItem[propertyName] : [listItem[propertyName]];\n                _.each(lookups, function(lookup: ap.ILookup) {\n                    if (lookup && lookup.lookupId) {\n                        var propertyCache = service.getPropertyCache(propertyName, listId);\n                        propertyCache[lookup.lookupId] = propertyCache[lookup.lookupId] || apIndexedCacheFactory.create();\n                        var lookupCache = propertyCache[lookup.lookupId];\n                        lookupCache.addEntity(listItem);\n                    } else {\n                        throw new Error(\"A valid lookup was not found.\");\n                    }\n                });\n            }\n        }\n\n        private removeEntityFromSingleLookupCache(listItem: ap.ListItem<any>, propertyName: string, listId: string): void {\n            /** Handle single and multiple lookups by only dealing with an Lookup[] */\n            var backedUpLookupValues = this.backup[listId][listItem.id];\n            \n            // Don't look at curent list item value in casee user changed it, look at the original backed up value that we stored so we can unregister\n            // what was originally registered.\n            if (backedUpLookupValues && backedUpLookupValues[propertyName]) {\n                var lookups = _.isArray(backedUpLookupValues[propertyName]) ? backedUpLookupValues[propertyName] : [backedUpLookupValues[propertyName]];\n                _.each(lookups, function(lookup: ap.ILookup) {\n                    if (lookup && lookup.lookupId) {\n                        var propertyCache = service.getPropertyCache(propertyName, listId);\n                        if (propertyCache[lookup.lookupId]) {\n                            var lookupCache = propertyCache[lookup.lookupId];\n                            lookupCache.removeEntity(listItem);\n                        }\n                    } else {\n                        throw new Error(\"A valid lookup was not found.\");\n                    }\n\n                });\n            }\n        }\n\n    }\n\n}","/// <reference path=\"../typings/tsd.d.ts\" />\n/// <reference path=\"angular-point-lookup-cache\" />\n\n\nmodule ap.lookupCache {\n    'use strict';\n\n    angular.module('apLookupCache', ['angularPoint'])\n        .service('apLookupCacheService', LookupCacheService);\n\n}"],"sourceRoot":"/source/"}