{"version":3,"sources":["angular-point-lookup-cache.ts"],"names":["ap","ap.LookupCacheService","ap.LookupCacheService.constructor","ap.LookupCacheService.cacheEntityByLookupId","ap.LookupCacheService.removeEntityFromLookupCaches","ap.LookupCacheService.retrieveLookupCacheById","ap.LookupCacheService.backupLookupValue","ap.LookupCacheService.cacheSingleLookup","ap.LookupCacheService.removeEntityFromSingleLookupCache","ap.LookupCacheService.getPropertyCache"],"mappings":"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","file":"angular-point-lookup-cache.js","sourcesContent":["/// <reference path=\"../typings/ap.d.ts\" />\n\nmodule ap {\n    'use strict';\n\n    var service: LookupCacheService, apIndexedCacheFactory;\n\n    interface ILookupCacheService {\n        backupLookupValue(listItem: ap.ListItem<any>, propertyName: string, listId: string): void;\n        cacheEntityByLookupId(listItem: ap.ListItem<any>, propertyArray: string[]): void;\n        cacheSingleLookup(listItem: ap.ListItem<any>, propertyName: string, listId: string): void;\n        getPropertyCache<T>(propertyName: string, listId: string): { [key: number]: ap.IndexedCache<T> };\n        removeEntityFromLookupCaches(listItem: ap.ListItem<any>, propertyArray: string[]): void;\n        removeEntityFromSingleLookupCache(listItem: ap.ListItem<any>, propertyName: string, listId: string): void;\n        retrieveLookupCacheById<T>(propertyName: string, listId: string, cacheId: number): ap.IndexedCache<T>;\n        retrieveLookupCacheById<T>(propertyName: string, listId: string, cacheId: number, asObject?: boolean): T[];\n    }\n\n    /**\n     * @ngdoc service\n     * @name apLookupCacheService\n     * @description\n     */\n    export class LookupCacheService implements ILookupCacheService {\n        backup: { [key: string]: { [key: number]: {} } } = {};\n        lookupCache = {};\n        static $inject = ['apIndexedCacheFactory'];\n        constructor(_apIndexedCacheFactory_) {\n            apIndexedCacheFactory = _apIndexedCacheFactory_;\n            service = this;\n        }\n        \n        /**\n         * @ngdoc function\n         * @name apLookupCacheService:cacheEntityByLookupId\n         * @methodOf apLookupCacheService\n         * @param {ListItem} listItem List item to index.\n         * @param {string[]} propertyArray Array of the lookup properties to index by lookupId.\n         */\n        cacheEntityByLookupId(listItem: ap.ListItem<any>, propertyArray: string[]): void {\n            if (listItem.id) {\n                /** GUID of the list definition on the model */\n                var listId = listItem.getListId();\n                /** Only cache entities saved to server */\n                _.each(propertyArray, (propertyName) => {\n                    service.cacheSingleLookup(listItem, propertyName, listId);\n                    service.backupLookupValue(listItem, propertyName, listId);\n                });\n            }\n        }\n\n        removeEntityFromLookupCaches(listItem: ap.ListItem<any>, propertyArray: string[]): void {\n            if (listItem.id) {\n                var listId = listItem.getListId();\n                /** Only cache entities saved to server */\n                _.each(propertyArray, function(propertyName) {\n                    service.removeEntityFromSingleLookupCache(listItem, propertyName, listId);\n                });\n            }\n        }\n\n        /**\n         * @ngdoc function\n         * @name apLookupCacheService:retrieveLookupCacheById\n         * @methodOf apLookupCacheService\n         * @param {string} propertyName Cache name - name of property on cached entity.\n         * @param {number} cacheId ID of the cache.  The entity.property.lookupId.\n         * @param {string} listId GUID of the list definition on the model.\n         * @param {boolean} [asObject=false] Defaults to return as an array but if set to false returns the cache object\n         * instead.\n         * @returns {object} Keys of entity id and value of entity.\n         */\n        retrieveLookupCacheById<T>(propertyName: string, listId: string, cacheId: number, asObject?: boolean) {\n            var cache = service.getPropertyCache(propertyName, listId);\n            if (asObject) {\n                cache[cacheId] = cache[cacheId] || apIndexedCacheFactory.create();\n                return cache[cacheId];\n            } else {\n                return cache[cacheId] ? _.toArray(cache[cacheId]) : [];\n            }\n        }\n        \n        /**\n        * @ngdoc function\n        * @name apLookupCacheService:backupLookupValue\n        * @methodOf apLookupCacheService\n        * @param {ListItem} listItem List item to index.\n        * @param {string} propertyName Cache name - name of property on cached entity.\n        * @param {string} listId GUID of the list definition on the model.\n        * @description Stores a copy of the initial lookup value so in the event that the lookup value is changed we can \n        * remove cached references prior to saving.\n        */\n        backupLookupValue(listItem: ap.ListItem<any>, propertyName: string, listId: string): void {\n            this.backup[listId] = this.backup[listId] || {};\n            this.backup[listId][listItem.id] = this.backup[listId][listItem.id] || {};\n            this.backup[listId][listItem.id][propertyName] = _.clone(listItem[propertyName]);\n        }        \n\n\n        cacheSingleLookup(listItem: ap.ListItem<any>, propertyName: string, listId: string): void {\n            /** Handle single and multiple lookups by only dealing with an Lookup[] */\n            var lookups = _.isArray(listItem[propertyName]) ? listItem[propertyName] : [listItem[propertyName]];\n            _.each(lookups, function(lookup: ap.ILookup) {\n                if (lookup && lookup.lookupId) {\n                    var propertyCache = service.getPropertyCache(propertyName, listId);\n                    propertyCache[lookup.lookupId] = propertyCache[lookup.lookupId] || apIndexedCacheFactory.create();\n                    var lookupCache = propertyCache[lookup.lookupId];\n                    lookupCache.addEntity(listItem);\n                }\n            });\n        }\n\n        removeEntityFromSingleLookupCache(listItem: ap.ListItem<any>, propertyName: string, listId: string): void {\n            /** Handle single and multiple lookups by only dealing with an Lookup[] */\n            var backedUpLookupValues = this.backup[listId][listItem.id]\n            var lookups = _.isArray(backedUpLookupValues[propertyName]) ? backedUpLookupValues[propertyName] : [backedUpLookupValues[propertyName]];\n            _.each(lookups, function(lookup: ap.ILookup) {\n                if (lookup && lookup.lookupId) {\n                    var propertyCache = service.getPropertyCache(propertyName, listId);\n                    if (propertyCache[lookup.lookupId]) {\n                        var lookupCache = propertyCache[lookup.lookupId];\n                        lookupCache.removeEntity(listItem);\n                    }\n                }\n            });\n        }\n\n        getPropertyCache<T>(propertyName: string, listId: string): { [key: number]: ap.IndexedCache<T> } {\n            this.lookupCache[listId] = this.lookupCache[listId] || {};\n            this.lookupCache[listId][propertyName] = this.lookupCache[listId][propertyName] || {};\n            return this.lookupCache[listId][propertyName];\n        }\n\n    }\n\n    angular\n        .module('angularPoint')\n        .service('apLookupCacheService', LookupCacheService);\n\n}"],"sourceRoot":"/source/"}