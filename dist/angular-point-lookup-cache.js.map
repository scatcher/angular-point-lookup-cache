{"version":3,"sources":["angular-point-lookup-cache.ts","index.ts"],"names":["ap","ap.lookupCache","ap.lookupCache.LookupCacheService","ap.lookupCache.LookupCacheService.constructor","ap.lookupCache.LookupCacheService.cacheEntityByLookupId","ap.lookupCache.LookupCacheService.getPropertyCache","ap.lookupCache.LookupCacheService.manageChangeEvents","ap.lookupCache.LookupCacheService.removeEntityFromLookupCaches","ap.lookupCache.LookupCacheService.retrieveLookupCacheById","ap.lookupCache.LookupCacheService.backupLookupValue","ap.lookupCache.LookupCacheService.cacheSingleLookup","ap.lookupCache.LookupCacheService.removeEntityFromSingleLookupCache"],"mappings":"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","file":"angular-point-lookup-cache.js","sourcesContent":["/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\nmodule ap.lookupCache {\r\n    'use strict';\r\n\r\n    var service: LookupCacheService, apIndexedCacheFactory;\r\n\r\n    interface ILookupCacheService {\r\n        cacheEntityByLookupId(listItem: ap.ListItem<any>, propertyArray: string[]): void;\r\n        getPropertyCache<T extends ap.ListItem<any>>(propertyName: string, listId: string): { [key: number]: ap.IndexedCache<T> };\r\n        removeEntityFromLookupCaches(listItem: ap.ListItem<any>, propertyArray: string[]): void;\r\n        retrieveLookupCacheById<T extends ap.ListItem<any>>(propertyName: string, listId: string, cacheId: number): ap.IndexedCache<T>;\r\n        retrieveLookupCacheById<T extends ap.ListItem<any>>(propertyName: string, listId: string, cacheId: number, asObject?: boolean): T[];\r\n    }\r\n\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name apLookupCacheService\r\n     * @description\r\n     * Service to create a reverse lookup cache that stores a list item in key/val map based on lookup id so the remote\r\n     * moddle can call service to find all related list items already stored in the cache.  Only need to process on list\r\n     * item instantiation and then prune references when a list item is saved/deleted.\r\n     *\r\n     *\r\n     * @example\r\n     * <pre>\r\n     * //Register On Model\r\n     * let apLookupCacheService: ap.lookupCache.LookupCacheService;\r\n     * let lookupFieldsToCache = ['project'];\r\n     *\r\n     * class ProjectTask{\r\n     *      constructor(obj) {\r\n     *          super();\r\n     *          _.assign(this, obj);\r\n     *\r\n     *          //Only cache list items saved to server so verify an id is available\r\n     *          if(this.id) {\r\n     *\r\n     *              // Store in cached object so we can reference from lookup reference\r\n     *              apLookupCacheService.cacheEntityByLookupId(this, lookupFieldsToCache);\r\n     *          }\r\n     *      }\r\n     *\r\n     *      //...other methods on constructor class\r\n     * }\r\n     *\r\n     * export class ProjectTasksModel extends ap.Model {\r\n     *      constructor($injector: ng.auto.IInjectorService) {\r\n     *\r\n     *          super({\r\n     *              factory: ProjectTask,\r\n     *              getChildren: getChildren,\r\n     *              list: {\r\n     *                  // Maps to the offline XML file in dev folder (no spaces)\r\n     *                  title: 'ProjectTask',\r\n     *                  /// List GUID can be found in list properties in SharePoint designer\r\n     *                  environments: {\r\n     *                      production: '{C72C44A2-DC40-4308-BEFF-3FF418D14022}',\r\n     *                      test: '{DAD8689C-8B9E-4088-BEC5-9F273CAAE104}'\r\n     *                  },\r\n     *                  customFields: [\r\n     *                      // Array of objects mapping each SharePoint field to a property on a list item object\r\n     *                      {staticName: 'Title', objectType: 'Text', mappedName: 'title', cols: 3, readOnly: false},\r\n     *                      {staticName: 'Project', objectType: 'Lookup', mappedName: 'project', readOnly: false}\r\n     *                      ...\r\n     *                  ]\r\n     *              }\r\n     *          });\r\n     *\r\n     *          //Expose service to ProjectTask class and we know it's already loaded because it's loaded before\r\n     *          //project files\r\n     *          apLookupCacheService = $injector.get('apLookupCacheService');\r\n     *\r\n     *          //Patch save and delete on class prototype to allow us to cleanup cache before each event\r\n     *          apLookupCacheService.manageChangeEvents(Muster, lookupFieldsToCache);\r\n     *\r\n     *      }\r\n     *\r\n     *      //...other methods on model\r\n     *\r\n     * }\r\n     * </pre>\r\n     */\r\n\r\n     /**\r\n     *\r\n     * @ngdoc function\r\n     * @name ProjectTask:getProjectTasks\r\n     * @methodOf ProjectTask\r\n     * @param {number} projectId ID of project to use as key for task lookups.\r\n     * @param {boolean} [asObject=false]  Optionally prevent conversion to an array.\r\n     * @description\r\n     * Find all project tasks that reference a given project.\r\n     * @returns {object} Keys of spec id's and value of the spec objects if \"asObject=true\" otherwise ProjectTask[]\r\n     * function getProjectTasks(projectId, asObject) {\r\n     *     return lookupCacheService.retrieveLookupCacheById<ProjectTask>('project', model.list.getListId(), projectId, asObject);\r\n     * }\r\n     * </pre>\r\n     *\r\n     *\r\n     * Using Cached Value From Project Object\r\n     * <pre>\r\n     * // On the project model\r\n     * function Project(obj) {\r\n     *     _.assign(this, obj);\r\n     * }\r\n     *\r\n     * Project.prototype.getProjectTasks = function() {\r\n     *     return projectTasksModel.getProjectTasks(this.id);\r\n     * }\r\n     *\r\n     * // Project tasks are now directly available from a given project\r\n     *\r\n     * //Returns an array containing all project tasks\r\n     * var projectTasks = myProject.getProjectTasks();\r\n     *\r\n     * //Returns an indexed cache object that hasn't been converted into an array, keys=id and val=list item\r\n     * var projectTasks = myProject.getProjectTasks(true);\r\n     * </pre>\r\n     */\r\n    export class LookupCacheService implements ILookupCacheService {\r\n        backup: { [key: string]: { [key: number]: {} } } = {};\r\n        lookupCache = {};\r\n        static $inject = ['apIndexedCacheFactory'];\r\n\r\n        constructor(_apIndexedCacheFactory_) {\r\n            apIndexedCacheFactory = _apIndexedCacheFactory_;\r\n            service = this;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name apLookupCacheService:cacheEntityByLookupId\r\n         * @methodOf apLookupCacheService\r\n         * @param {ListItem} listItem List item to index.\r\n         * @param {string[]} propertyArray Array of the lookup properties to index by lookupId.\r\n         */\r\n        cacheEntityByLookupId(listItem: ap.ListItem<any>, propertyArray: string[]): void {\r\n            if (listItem.id) {\r\n                /** GUID of the list definition on the model */\r\n                var listId = listItem.getListId();\r\n                /** Only cache entities saved to server */\r\n                _.each(propertyArray, (propertyName) => {\r\n                    service.cacheSingleLookup(listItem, propertyName, listId);\r\n                    service.backupLookupValue(listItem, propertyName, listId);\r\n                });\r\n            }\r\n        }\r\n\r\n        getPropertyCache<T extends ap.ListItem<any>>(propertyName: string, listId: string): { [key: number]: ap.IndexedCache<T> } {\r\n            this.lookupCache[listId] = this.lookupCache[listId] || {};\r\n            this.lookupCache[listId][propertyName] = this.lookupCache[listId][propertyName] || {};\r\n            return this.lookupCache[listId][propertyName];\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name apLookupCacheService:manageChangeEvents\r\n         * @methodOf apLookupCacheService\r\n         * @param {ListItem} listItemConstructor List item class.\r\n         * @param {string[]} propertyArray Array of the lookup properties being cached.\r\n         * @description Attaches preSave and preDelete actions to the list item prototype for a given model.\r\n         * Cleans up local cache prior to list item save or delete.  When saved, the newly returned\r\n         * list item is then added back into the cache and when deleted we prune the list item from all cache objects.\r\n         *\r\n         * @example\r\n         * <pre>\r\n         * //...inside the model constructor\r\n         * //New way with use of helper method\r\n         * apLookupCacheService.manageChangeEvents(MyListItemFactoryClass, MyLookupFieldNamesArrayToCache);\r\n         *\r\n         * //vs. Old Way\r\n         *\r\n         * //...somewhere below the ListItemFactoryClass definition\r\n         * //Monkey Patch save and delete to allow us to cleanup cache\r\n         * MyListItemFactoryClass.prototype._deleteItem = MyListItemFactoryClass.prototype.deleteItem;\r\n         * MyListItemFactoryClass.prototype.deleteItem = function () {\r\n         *     if (this.id) {\r\n         *         apLookupCacheService.removeEntityFromLookupCaches(this, MyLookupFieldNamesArrayToCache);\r\n         *     }\r\n         *     return this._deleteItem(arguments);\r\n         * }\r\n         * MyListItemFactoryClass.prototype._saveChanges = MyListItemFactoryClass.prototype.saveChanges;\r\n         * MyListItemFactoryClass.prototype.saveChanges = function () {\r\n         *     if (this.id) {\r\n         *         apLookupCacheService.removeEntityFromLookupCaches(this, MyLookupFieldNamesArrayToCache);\r\n         *     }\r\n         *     return this._saveChanges(arguments);\r\n         * }\r\n         *\r\n         * </pre>\r\n         */\r\n        manageChangeEvents(listItemConstructor: ap.ListItem<any>, propertyArray: string[]) {\r\n            var unSubscribeOnChange = function() {\r\n                if (this.id) {\r\n                    service.removeEntityFromLookupCaches(this, propertyArray);\r\n                }\r\n                //Need to return true otherwise it means validation failed and save/delete event is prevented\r\n                return true;\r\n            }\r\n            listItemConstructor.prototype.registerPreDeleteAction(unSubscribeOnChange);\r\n            listItemConstructor.prototype.registerPreSaveAction(unSubscribeOnChange);\r\n        }\r\n\r\n        removeEntityFromLookupCaches(listItem: ap.ListItem<any>, propertyArray: string[]): void {\r\n            if (listItem.id) {\r\n                var listId = listItem.getListId();\r\n                /** Only cache entities saved to server and we know because they'd have an id */\r\n                _.each(propertyArray, function(propertyName) {\r\n                    service.removeEntityFromSingleLookupCache(listItem, propertyName, listId);\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name apLookupCacheService:retrieveLookupCacheById\r\n         * @methodOf apLookupCacheService\r\n         * @param {string} propertyName Cache name - name of property on cached entity.\r\n         * @param {number} cacheId ID of the cache.  The entity.property.lookupId.\r\n         * @param {string} listId GUID of the list definition on the model.\r\n         * @param {boolean} [asObject=false] Defaults to return as an array but if set to false returns the cache object\r\n         * instead.\r\n         * @returns {object} Keys of entity id and value of entity.\r\n         */\r\n        retrieveLookupCacheById<T extends ap.ListItem<any>>(propertyName: string, listId: string, cacheId: number, asObject: boolean = false) {\r\n            var cache = service.getPropertyCache(propertyName, listId);\r\n            if (asObject) {\r\n                cache[cacheId] = cache[cacheId] || apIndexedCacheFactory.create<T>();\r\n                return cache[cacheId];\r\n            } else {\r\n                return cache[cacheId] ? _.toArray(cache[cacheId]) : [];\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name apLookupCacheService:backupLookupValue\r\n         * @methodOf apLookupCacheService\r\n         * @param {ListItem} listItem List item to index.\r\n         * @param {string} propertyName Cache name - name of property on cached entity.\r\n         * @param {string} listId GUID of the list definition on the model.\r\n         * @description Stores a copy of the initial lookup value so in the event that the lookup value is changed we can\r\n         * remove cached references prior to saving.\r\n         */\r\n        private backupLookupValue(listItem: ap.ListItem<any>, propertyName: string, listId: string): void {\r\n            this.backup[listId] = this.backup[listId] || {};\r\n            this.backup[listId][listItem.id] = this.backup[listId][listItem.id] || {};\r\n            this.backup[listId][listItem.id][propertyName] = _.clone(listItem[propertyName]);\r\n        }\r\n\r\n\r\n        private cacheSingleLookup(listItem: ap.ListItem<any>, propertyName: string, listId: string): void {\r\n            if (listItem[propertyName]) {\r\n                /** Handle single and multiple lookups by only dealing with an Lookup[] */\r\n                var lookups = _.isArray(listItem[propertyName]) ? listItem[propertyName] : [listItem[propertyName]];\r\n                _.each(lookups, function(lookup: ap.ILookup<any>) {\r\n                    if (lookup && lookup.lookupId) {\r\n                        var propertyCache = service.getPropertyCache(propertyName, listId);\r\n                        propertyCache[lookup.lookupId] = propertyCache[lookup.lookupId] || apIndexedCacheFactory.create();\r\n                        var lookupCache = propertyCache[lookup.lookupId];\r\n                        lookupCache.set(listItem.id, listItem);\r\n                    } else {\r\n                        throw new Error(\"A valid lookup was not found.\");\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        private removeEntityFromSingleLookupCache(listItem: ap.ListItem<any>, propertyName: string, listId: string): void {\r\n            /** Handle single and multiple lookups by only dealing with an Lookup[] */\r\n            var backedUpLookupValues = this.backup[listId][listItem.id];\r\n\r\n            // Don't look at curent list item value in casee user changed it, look at the original backed up value that we stored so we can unregister\r\n            // what was originally registered.\r\n            if (backedUpLookupValues && backedUpLookupValues[propertyName]) {\r\n                var lookups = _.isArray(backedUpLookupValues[propertyName]) ? backedUpLookupValues[propertyName] : [backedUpLookupValues[propertyName]];\r\n                _.each(lookups, function(lookup: ap.ILookup<any>) {\r\n                    if (lookup && lookup.lookupId) {\r\n                        var propertyCache = service.getPropertyCache(propertyName, listId);\r\n                        if (propertyCache[lookup.lookupId]) {\r\n                            var lookupCache = propertyCache[lookup.lookupId];\r\n                            lookupCache.delete(listItem.id);\r\n                        }\r\n                    } else {\r\n                        throw new Error(\"A valid lookup was not found.\");\r\n                    }\r\n\r\n                });\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}","/// <reference path=\"../typings/tsd.d.ts\" />\r\n/// <reference path=\"angular-point-lookup-cache\" />\r\n\r\n\r\nmodule ap.lookupCache {\r\n    'use strict';\r\n\r\n    angular.module('apLookupCache', ['angularPoint'])\r\n        .service('apLookupCacheService', LookupCacheService);\r\n\r\n}"],"sourceRoot":"/source/"}